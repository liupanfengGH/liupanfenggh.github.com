{"posts":[{"title":"Git多账户使用","text":"（个人）Git 与 （公司）TortoiseGit ​ 由于我个人使用的是Git原生工具，公司使用的是局域网搭建的TortoiseGit仓库，但是都需要使用Git的功能,故在此记录一些要点。 重新设置一下全局的git的信息 命令:git config --global --unset user.name 命令:git config --global --unset user.email 生成git账户的ssh-key 命令: ssh-keygen -t rsa -C &quot;自己的Github邮箱&quot; -f ~/.ssh/github_rsa 由于公司使用的时本地局域网（TortoiseGit）即这里可以不生成公钥。 使用ssh代理 命令:ssh-agent bash 命令:ssh-add ~/.ssh/github_rsa 如果出现Identity added: /c/Users/Administrator/.ssh/github_rsa (xx@xx.com)代表添加成功。 将公钥添加到自己的git账户中 将github_rsa.pub的内容粘贴到自己的GitHub页面的SSH Keys—-&gt;New SSH Key中去。 在.ssh目录下，新创建一个config文件，去掉后缀的 txt文件，使用记事本打开 Host github.comIdentityFile ~/.ssh/github_rsa 如果有多个账户 以上面的 方式 隔开 已组的方式添加即可。(注:公钥文件是区分用户权限) 保存文件，测试。 命令:ssh -T git@github.com 出现 Hi…..表示配置成功 使用Git Bash Here 工具进入 不同的本地仓库设置不同的用户名和邮箱。 命令:git config --local user.name “自己的github名” 命令:git config --local user.email ”自己的github邮箱“","link":"/2022/11/16/Git%E5%A4%9A%E8%B4%A6%E6%88%B7%E4%BD%BF%E7%94%A8/"},{"title":"Hexo中发布带图片的文章","text":"使用Hexo发布的博客如果想要显示图片需要配置以下几个地方： 安装 Hexo 依赖包：npm install hexo-asset-image –save 使用命令hexo new ”博客名字“ 生成新的MD文件 会自动生成一个与 ”博客名字“相同的目录，这个目录用于存放你的图片资源 使用相对路径引用里面图片，如果是为已有的博客添加图片类资源只需要在 source\\_posts\\ 路径下新建一个相同名字的文件夹即可","link":"/2022/11/13/Hexo%E4%B8%AD%E5%8F%91%E5%B8%83%E5%B8%A6%E5%9B%BE%E7%89%87%E7%9A%84%E6%96%87%E7%AB%A0/"},{"title":"使用 Hexo + Github 搭建个人博客","text":"1.准备工作下载NodeJs👈点击访问官网 下载Git👈点击访问官网 注册Github👈点击访问官网 2.安装NodeJs: 双击NodeJS安装程序 向导部分使用默认选项安装即可(Next按钮到底) 安装完成 使用命令行工具 使用 node -v 验证安装。 使用 npm -v 验证安装。 如果希望自定义NodeJs下载的 全局模块和缓存 文件夹的存放路径， 那么需要 在 盘符:\\目录… 2个空文件夹 ， 使用 npm config set prefix ”盘符:\\目录…\\node_global“ 指定全局模块下载路径， 使用 npm config set cache ”盘符:\\目录…\\node_cache“ 指定缓存下载路径。 右击 计算机—–&gt;属性—–&gt;环境变量—-&gt;在用户变量中点击新建—–&gt;变量名输入NODE_PATH, 变量值输入盘符:\\目录…\\node_global\\node_modules.—–&gt;在系统变量下的Path变量的变量值中增加 盘符:\\目录…\\node_global 一条路径。 经过上面的步骤，NodeJs下载的模块会下载到我们自定义的盘符目录中，使用 npm install express -g 验证。（-g 是全局安装的意思，不加 -g 会默认下载到当前目录）。如果执行出错 检查是否应用了 计算机的 PowerShell脚本设置,在电脑设置—-&gt;开发者选项—–&gt;PowerShell 检查文件夹权限 将所有权限 允许即可。 ———-&gt;如出现 无响应的情况 执行 第3步 设置完毕后再执行上面的验证 ———&gt;如果不需要略过此项 使用 npm下载时 是从国外服务器下载，国内会很慢，一般会指向淘宝https://registry.npm.taobao.org。 查看npm源 使用 npm config get registry 如果是https://registry.npmjs.org/ 说明是外国源 更换位淘宝源 使用 npm config set registry https://registry.npm.taobao.org 使用上面命令查看配置是否成功。 由于npm的服务器在海外，访问速度慢，不稳定，cnpm的服务器是由淘宝团队提供，在国内cnpm是npm镜像，一般会同步更新，相差10分钟左右，所以cnpm在安装一些软件时会快很多，cnpm只适用于安装，项目创建和卸载相关操作还是使用 npm命令。 npm install -g cnpm –registry=https://registry.npm.taobao.org 操作完之后能在node_gloal\\node——modules目录下看到cnpm模块 使用 cnpm -v 可查看 ———–&gt;如果有科学上网工具可以略过此项 Git: 双击Git安装程序，向导部分使用默认选项安装即可(Next按钮到底) 安装完成 使用命令行工具 git -v 验证安装。 在桌面右击—&gt;选择Git bash here 使用git命令配置个人信息 git config –global user.name “自己在Github上注册的用户名” git config –global user.email “自己在Github时注册的邮箱” 配置完成 生成 SSH Keys 使用命令: ssh-keygen - t rsa -C “Github时注册的邮箱” 回车后会在C:\\Users\\Administrator.ssh目录中生成一个 id_rsa.pub的文件 GitHub: 登录GitHub 点击最右侧的头像—-&gt;Settings—-&gt;SSH and GPG keys—-&gt;New SSH key 将C:\\Users\\Administrator.ssh\\id_rsa.pub用记事本打开复制里面的内容粘贴到 Key框中。 Title随意。 点击Add SSH key 点击 + 号 选择 New repository —&gt;Repository name 部分 填写格式 用户名.github.(com 或者 git)。其它默认即可。 在浏览器中输入:用户名.github.io 能正常访问 表示配置成功。 3.关联Hexo &amp; Github 在某个盘符新建一个文件夹 使用命令行工具指向该路径 使用 npm 或者 cnpm 安装 Hexo框架 命令:npm install -g hexo-cli 命令:cnpm install hexo –save 初始化 hexo 使用命令: hexo init 生成静态文件 使用命令:hexo g 打开本调试服务器 使用命令:hexo s 在浏览器中输入 localhost:4000即可看到hexo框架默认展示 部署到github远端服务器 使用命令:npm install hexo-deployer-git –save 下载关联插件 打开博客目录—-&gt;_config.yml使用记事本打开修改deploy部分： 使用命令:hexo d 推送到github仓库 使用浏览器访问:用户名.github.io","link":"/2022/11/13/%E4%BD%BF%E7%94%A8Hexo-Github-%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"},{"title":"使用自定义的域名指向自己的GitHub博客","text":"域名准备","link":"/2022/11/17/%E4%BD%BF%E7%94%A8%E8%87%AA%E5%AE%9A%E4%B9%89%E7%9A%84%E5%9F%9F%E5%90%8D%E6%8C%87%E5%90%91%E8%87%AA%E5%B7%B1%E7%9A%84GitHub%E5%8D%9A%E5%AE%A2/"},{"title":"使用同个GitHub账号在多台设备同步创作","text":"前言: ​ 由于想在家里和公司都能编写博客，即研究了一下如何实现多台设备同步的方案。 1.配置Github分支 登录GitHub进入自己的github博客仓库 在当前页面 点击Switch branches or tags 按钮 在当前页面 点击View all branches 在当前页面 点击New branch按钮 在当前对话框页面 Branch name 下框输入 分支名字并点击Create branch按钮 在当前页面 点击Settings按钮——&gt;点击左侧的Branches文本按钮 在当前页面 Default branch 说明处 点击 Switch to another branch按钮 选择创建的分支名称，并点击Update按钮—-&gt;确认更改默认分支。 2.克隆分支到本地 复制仓库链接 使用命令行工具进入自己的博客目录 使用命令: git clone 粘贴仓库链接 ，等待clone完成 打开克隆的仓库目录 删除除了 .git 目录以外的所有文件及文件夹 (文件夹选项需要 勾选显示隐藏的项目) 使用命令行工具进入本地仓库目录 使用命令:git add -A 使用命令:git commit -m “清理分支仓库” 使用命令:git push origin 分支仓库名称 等待删除完毕. 将 .git 目录 剪切放入上层的博客目录,并关闭 命令行工具 使用命令行工具打开 博客目录 使用命令:git add -A 使用命令:git commit -m “提交工程” 使用命令:git push origin 分支仓库名称 去自己的GitHub远程仓库查看 此时仓库中有了 2个分支 1个是用于存放生成的博客静态资源文件(master)分支，1个是用于存放工程文件的(hexo)分支。工程分支 修改完毕 测试完成 提交到自己的（hexo)分支，根据需要 使用 hexo 命令 调试 和 发布到 (master)分支。 3.多设备同步博客 在另一台设备装了git工具包的机器中 使用 Git bash 功能将 远端仓库工程代码拉取下来 将Hexo框架需要的工具包重新安装一遍(注:不要使用 hexo init 命令了，因为原来的机器已经配置好了) 每次操作前拉取最新的 工程文件(hexo)分支 再进行修改","link":"/2022/11/14/%E4%BD%BF%E7%94%A8%E5%90%8C%E4%B8%AAGitHub%E8%B4%A6%E5%8F%B7%E5%9C%A8%E5%A4%9A%E5%8F%B0%E8%AE%BE%E5%A4%87%E5%90%8C%E6%AD%A5%E5%88%9B%E4%BD%9C/"},{"title":"关于Hexo框架博客迁移与同步时遇到的一些问题","text":"另一台设备​ 设备已经安装完毕 NodeJS 与 Git 工具包，这里不再赘述，如有需要请转到 使用Hexo-Github-搭建个人博客安装部分查看。 使用Git Bash Here 克隆 GitHub 远端仓库的个人博客地址 使用命令:Git Clone 自己的博客仓库地址 克隆完成之后使用 命令行工具进入此目录 使用命令:npm 或 cnpm install -g hexo-cli 回车 使用命令:npm 或 cnpm install hexo –save 回车 安装完成 hexo 框架，使用命令 hexo g 生成博客文件 如果 files 出现 0 的情况代表出现了问题。 1.主题包(themes)问题 ​ 解决此类问题，只需要到对应的 插件包地址 重新安装即可（比如我使用了 icarus 的主题插件包 ，只需要到 https://github.com/ppoffice/hexo-theme-icarus 根据 说明 重新安装即可。） 2.插件包(node_modules)问题 ​ 这类问题一般是在安装插件包的时候出现： ​ ​ 解决此类问题，使用命令:npm view 插件包名，然后可以看到 插件包目前的包信息，复制安装包信息的URL，使用命令：npm install URL地址 安装即可。如下图所示： ​ 还有一种解决方式：打开浏览器输入 https://www.npmjs.com/ 再网站搜索栏搜索这个 安装包。如果没有找到安装包的信息，看看控制台是否有 dependency 的 信息 如果有 直接使用npm命令安装 dependency of ‘xxxx’ 包 即可。（npm install xxxx) 3.md文件是否丢失，检查\\\\source\\_posts路径下的文件 预览时发现博客中的图片丢失. 解决此类方法使用相对路径即可。( /xx.png )","link":"/2022/11/15/%E5%85%B3%E4%BA%8EHexo%E6%A1%86%E6%9E%B6%E5%8D%9A%E5%AE%A2%E8%BF%81%E7%A7%BB%E4%B8%8E%E5%90%8C%E6%AD%A5%E6%97%B6%E9%81%87%E5%88%B0%E7%9A%84%E4%B8%80%E4%BA%9B%E9%97%AE%E9%A2%98/"}],"tags":[{"name":"Git","slug":"Git","link":"/tags/Git/"},{"name":"Web","slug":"Web","link":"/tags/Web/"}],"categories":[],"pages":[]}